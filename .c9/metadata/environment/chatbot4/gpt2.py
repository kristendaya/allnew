{"filter":false,"title":"gpt2.py","tooltip":"/chatbot4/gpt2.py","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":13},"action":"insert","lines":["43.200.93.156"],"id":1}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"remove","lines":["6"],"id":2},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"remove","lines":["5"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"remove","lines":["1"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["."]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["3"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"remove","lines":["9"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"remove","lines":["."]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"remove","lines":["0"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"remove","lines":["0"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":["2"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["."]},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["3"]},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["4"]},{"start":{"row":0,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify","import openai","","app = Flask(__name__)","","# OpenAI API key setup","api_key = 'YOUR_API_KEY'  # Replace 'YOUR_API_KEY' with your actual API key","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for all questions","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.route('/api/faq', methods=['POST'])","def process_faq():","    user_input = request.json.get('question')","","    # Check if the user's question matches any FAQ question","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        return jsonify({\"response\": faq_answer})","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        return jsonify({\"response\": gpt_answer})","","if __name__ == '__main__':","    app.run()",""]}],[{"start":{"row":6,"column":22},"end":{"row":6,"column":23},"action":"remove","lines":["Y"],"id":3},{"start":{"row":6,"column":21},"end":{"row":6,"column":22},"action":"remove","lines":["E"]},{"start":{"row":6,"column":20},"end":{"row":6,"column":21},"action":"remove","lines":["K"]},{"start":{"row":6,"column":19},"end":{"row":6,"column":20},"action":"remove","lines":["_"]},{"start":{"row":6,"column":18},"end":{"row":6,"column":19},"action":"remove","lines":["I"]},{"start":{"row":6,"column":17},"end":{"row":6,"column":18},"action":"remove","lines":["P"]},{"start":{"row":6,"column":16},"end":{"row":6,"column":17},"action":"remove","lines":["A"]},{"start":{"row":6,"column":15},"end":{"row":6,"column":16},"action":"remove","lines":["_"]},{"start":{"row":6,"column":14},"end":{"row":6,"column":15},"action":"remove","lines":["R"]},{"start":{"row":6,"column":13},"end":{"row":6,"column":14},"action":"remove","lines":["U"]},{"start":{"row":6,"column":12},"end":{"row":6,"column":13},"action":"remove","lines":["O"]},{"start":{"row":6,"column":11},"end":{"row":6,"column":12},"action":"remove","lines":["Y"]}],[{"start":{"row":6,"column":11},"end":{"row":6,"column":62},"action":"insert","lines":["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"],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify","import openai","","app = Flask(__name__)","","# OpenAI API key setup","api_key = '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'  # Replace 'YOUR_API_KEY' with your actual API key","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for all questions","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.route('/api/faq', methods=['POST'])","def process_faq():","    user_input = request.json.get('question')","","    # Check if the user's question matches any FAQ question","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        return jsonify({\"response\": faq_answer})","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        return jsonify({\"response\": gpt_answer})","","if __name__ == '__main__':","    app.run()",""],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify","import openai","","app = Flask(__name__)","","# OpenAI API key setup","api_key = 'YOUR_API_KEY'  # Replace 'YOUR_API_KEY' with your actual API key","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for all questions","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.route('/api/faq', methods=['POST'])","def process_faq():","    user_input = request.json.get('question')","","    # Check if the user's question matches any FAQ question","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        return jsonify({\"response\": faq_answer})","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        return jsonify({\"response\": gpt_answer})","","if __name__ == '__main__':","    app.run()",""],"id":6}],[{"start":{"row":6,"column":11},"end":{"row":6,"column":23},"action":"remove","lines":["YOUR_API_KEY"],"id":7},{"start":{"row":6,"column":11},"end":{"row":6,"column":62},"action":"insert","lines":["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"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":7,"column":24},"end":{"row":7,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1690347869734,"hash":"f105afba011f304300ceac4a9164dbfee9cd8081"}