{"filter":false,"title":"app.py","tooltip":"/chatbot2/app.py","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["from fastapi import FastAPI, File, UploadFile, Form","import openai","","app = FastAPI()","","# OpenAI API key setup","api_key = \"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\"","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for the question","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.post(\"/process_file\")","async def process_file(file: UploadFile = File(...)):","    # Read the content of the uploaded file","    file_content = await file.read()","","    # Process the file content and generate the answer","    user_input = file_content.decode(\"utf-8\")","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":38},"action":"remove","lines":["from fastapi import FastAPI, File, UploadFile, Form","import openai","","app = FastAPI()","","# OpenAI API key setup","api_key = \"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\"","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for the question","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.post(\"/process_file\")","async def process_file(file: UploadFile = File(...)):","    # Read the content of the uploaded file","    file_content = await file.read()","","    # Process the file content and generate the answer","    user_input = file_content.decode(\"utf-8\")","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}"],"id":2},{"start":{"row":0,"column":0},"end":{"row":44,"column":38},"action":"insert","lines":["from fastapi import FastAPI","","import openai","","app = FastAPI()","","# OpenAI API key setup","api_key = \"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\"","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for the question","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.post(\"/chatbot\")","async def chatbot_response(user_input: str = Form(...)):","    # Process user input and generate the appropriate response","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}"]}],[{"start":{"row":7,"column":11},"end":{"row":7,"column":62},"action":"remove","lines":["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"],"id":3},{"start":{"row":7,"column":11},"end":{"row":7,"column":62},"action":"insert","lines":["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"]}],[{"start":{"row":32,"column":0},"end":{"row":44,"column":38},"action":"remove","lines":["@app.post(\"/chatbot\")","async def chatbot_response(user_input: str = Form(...)):","    # Process user input and generate the appropriate response","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}"],"id":4},{"start":{"row":32,"column":0},"end":{"row":44,"column":38},"action":"insert","lines":["@app.post(\"/chatbot\")","async def chatbot_response(user_input: str = Form(...)):","    # Process user input and generate the appropriate response","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}"]}],[{"start":{"row":32,"column":0},"end":{"row":44,"column":38},"action":"remove","lines":["@app.post(\"/chatbot\")","async def chatbot_response(user_input: str = Form(...)):","    # Process user input and generate the appropriate response","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}"],"id":5},{"start":{"row":32,"column":0},"end":{"row":44,"column":38},"action":"insert","lines":["@app.post(\"/chatbot\")","async def chatbot_response(user_input: str):","    # Process user input and generate the appropriate response","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}"]}],[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"remove","lines":["from fastapi import FastAPI","","import openai","","app = FastAPI()","","# OpenAI API key setup","api_key = \"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\"","openai.api_key = api_key","","# FAQ data","faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    # Add more FAQ questions and answers here.","]","","def get_gpt_answer(question):","    # Use GPT-3.5 API to generate an answer for the question","    response = openai.Completion.create(","        engine=\"text-davinci-003\",","        prompt=question,","        max_tokens=100","    )","    return response.choices[0].text.strip()","","@app.post(\"/chatbot\")","async def chatbot_response(user_input: str):","    # Process user input and generate the appropriate response","    faq_answer = next((faq[\"answer\"] for faq in faq_data if faq[\"question\"].lower() == user_input.lower()), None)","","    if faq_answer:","        response_text = f\"FAQ Bot: {faq_answer}\"","    else:","        # If the question is not in the FAQ data, use GPT-3.5 for the answer","        gpt_answer = get_gpt_answer(user_input)","        response_text = f\"GPT-3.5: {gpt_answer}\"","","    return {\"response\": response_text}",""],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"insert","lines":["const express = require('express');","const fetch = require('node-fetch');","","const app = express();","const PORT = 3000;","","// OpenAI API key setup","const api_key = \"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\";","","// FAQ data","const faq_data = [","    {","        \"question\": \"What is your return policy?\",","        \"answer\": \"Our return policy lasts 30 days from the date of purchase...\"","    },","    {","        \"question\": \"How do I track my order?\",","        \"answer\": \"Once your order is shipped, you will receive a tracking link...\"","    },","    // Add more FAQ questions and answers here.","];","","// Function to get GPT-3.5 answer","async function getGPTAnswer(question) {","    const response = await fetch(\"https://api.openai.com/v1/engines/text-davinci-003/completions\", {","        method: \"POST\",","        headers: {","            \"Content-Type\": \"application/json\",","            \"Authorization\": `Bearer ${api_key}`","        },","        body: JSON.stringify({","            prompt: question,","            max_tokens: 100","        })","    });","","    const data = await response.json();","    return data.choices[0].text.trim();","}","","// Express middleware to parse JSON data","app.use(express.json());","","// POST endpoint to handle chatbot responses","app.post(\"/chatbot\", (req, res) => {","    const user_input = req.body.user_input;","    const faq_answer = faq_data.find(faq => faq.question.toLowerCase() === user_input.toLowerCase());","","    if (faq_answer) {","        res.json({ response: `FAQ Bot: ${faq_answer.answer}` });","    } else {","        getGPTAnswer(user_input)","            .then(gpt_answer => {","                res.json({ response: `GPT-3.5: ${gpt_answer}` });","            })","            .catch(error => {","                console.error(\"Error:\", error);","                res.status(500).json({ error: \"Internal Server Error\" });","            });","    }","});","","// Start the server","app.listen(PORT, () => {","    console.log(`Server is running on http://localhost:${PORT}`);","});",""],"id":7}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":59,"column":5},"end":{"row":59,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1690446860803,"hash":"8150d193716935eb23ccbf7f0f3d3f26b8c7dae4"}